variables:
    HEROKU_APP_NAME: "${HEROKU_APP_NAME}"
    HEROKU_PRODUCTION_KEY: "${HEROKU_PRODUCTION_KEY}"
    
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    
    SONAR_TOKEN: "${SONAR_TOKEN}"
    SONAR_HOST_URL: "${SONAR_HOST_URL}"

stages:          # List of stages for jobs, and their order of execution
    - build
    - quality
    - test
    - deploy

# Définir l'image par défaut pour tout le stage quality
.default_quality:
    image: jakzal/phpqa:php8.0  # Image contenant tous les outils de qualité pour PHP
    dependencies:
        - build-job

build-job:
    stage: build
    image: php:8.0-fpm
    services:
        - name: postgres:13
          alias: postgres
    variables:
        POSTGRES_DB: myapptest_test
        POSTGRES_USER: myapptest
        POSTGRES_PASSWORD: myapptest
        DATABASE_URL: 'postgresql://myapptest:myapptest@postgres:5432/myapptest_test'
    cache:
        paths:
            - vendor/
    artifacts:
        paths:
            - ./  # Sauvegarder tout le répertoire de l'application
    before_script:
        - apt-get update && apt-get install -y git libzip-dev unzip libpq-dev postgresql-client libicu-dev  # Ajout de libicu-dev pour l'extension intl
        - docker-php-ext-install pdo pdo_pgsql zip intl  # Ajout de intl
        - curl -sS https://getcomposer.org/installer | php -- --disable-tls && mv composer.phar /usr/local/bin/composer
        # Créer le fichier .env.local à partir de .env.local.dist sans les commentaires
        - grep -v '^#' .env.local.dist > .env.local
        # Mise à jour de composer.lock et des dépendances pour résoudre les conflits
        - composer update --with-all-dependencies
    script:
        - php -v
        - php -m
        - php bin/console cache:clear
    allow_failure: false

phpcs:
    stage: quality
    extends: .default_quality  # Utilisation de l'image définie pour quality
    script:
        - phpcs -v --standard=PSR12 --ignore=./src/Kernel.php ./src
    allow_failure: true

phpstan:
    stage: quality
    extends: .default_quality  # Utilisation de l'image définie pour quality
    script:
        - phpstan analyse ./src ./tests
    allow_failure: false

twig-lint:
    stage: quality
    extends: .default_quality  # Utilisation de l'image définie pour quality
    script:
        - twig-lint lint ./templates
    allow_failure: true

security-checker:
    stage: quality
    extends: .default_quality  # Utilisation de l'image définie pour quality
    script:
        - local-php-security-checker --path=./composer.lock
    allow_failure: true

sonarcloud-check:
    stage: quality
    image: sonarsource/sonar-scanner-cli:latest
    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .sonar/cache
    script:
        - sonar-scanner
    only:
        - merge_requests
        - main
        - master
        - develop

phpunit:
    stage: test
    image: php:8.0-fpm
    services:
        - name: postgres:13
          alias: postgres
    dependencies:
        - build-job  # Utilise les artefacts du build-job
    variables:
        POSTGRES_DB: myapptest_test
        POSTGRES_USER: myapptest
        POSTGRES_PASSWORD: myapptest
        DATABASE_URL: 'postgresql://myapptest:myapptest@postgres:5432/myapptest_test'
        APP_ENV: test  # Assurer que l'environnement est en mode test
    before_script:
        # Installer les dépendances nécessaires
        - apt-get update && apt-get install -y git libzip-dev unzip libpq-dev postgresql-client libicu-dev
        - docker-php-ext-install pdo pdo_pgsql zip intl
        # Installer composer
        - curl -sS https://getcomposer.org/installer | php -- --disable-tls && mv composer.phar /usr/local/bin/composer
        # Créer le fichier .env.local à partir de .env.local.dist sans les commentaires
        - grep -v '^#' .env.local.dist > .env.local
        # Mettre à jour les dépendances PHP
        - composer update --with-all-dependencies
        # Nettoyer le cache de Symfony
        - php bin/console cache:clear
        # Recréation de la base de données pour l'environnement de test
        - php bin/console doctrine:database:drop --if-exists --force --env=test
        - php bin/console doctrine:database:create --env=test
    script:
        # Exécution des migrations
        - php bin/console doctrine:migration:migrate --env=test --no-interaction
        # Charger les fixtures
        - php bin/console doctrine:fixtures:load --env=test --no-interaction
        # Exécuter les tests PHPUnit
        - vendor/bin/phpunit --testdox
    allow_failure: false


heroku_deploy:
    stage: deploy
    script:
        - apt-get update -qy
        - apt-get install -yqq ruby ruby-dev nodejs --silent
        - gem update --system
        - gem install dpl
        - dpl --provider=heroku --app=$HEROKU_APP --api-key=$HEROKU_PRODUCTION_KEY
    only:
        - master
        - main
