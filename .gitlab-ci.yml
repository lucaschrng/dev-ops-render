variables:
    HEROKU_APP_NAME: "${HEROKU_APP_NAME}"
    HEROKU_PRODUCTION_KEY: "${HEROKU_PRODUCTION_KEY}"
    
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"

    SONAR_TOKEN: "${SONAR_TOKEN}"
    SONAR_HOST_URL: "${SONAR_HOST_URL}"

stages:
    - build
    - quality
    - test
    - deploy

.default_quality:
    image: jakzal/phpqa:php8.0
    dependencies:
        - build-job

build-job:
    stage: build
    image: php:8.0-fpm
    services:
        - name: postgres:13
          alias: postgres
    variables:
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
    cache:
        paths:
            - vendor/
    artifacts:
        paths:
            - ./
    before_script:
        - apt-get update && apt-get install -y git libzip-dev unzip libpq-dev postgresql-client libicu-dev
        - docker-php-ext-install pdo pdo_pgsql zip intl
        - curl -sS https://getcomposer.org/installer | php -- --disable-tls && mv composer.phar /usr/local/bin/composer
        - grep -v '^#' .env.local.dist > .env.local
        - composer update --with-all-dependencies
    script:
        - php -v
        - php -m
        - php bin/console cache:clear
    allow_failure: false

phpcs:
    stage: quality
    extends: .default_quality
    script:
        - phpcs -v --standard=PSR12 --ignore=./src/Kernel.php ./src
    allow_failure: true

phpstan:
    stage: quality
    extends: .default_quality
    script:
        - phpstan analyse ./src ./tests
    allow_failure: false

twig-lint:
    stage: quality
    extends: .default_quality
    script:
        - twig-lint lint ./templates
    allow_failure: true

security-checker:
    stage: quality
    extends: .default_quality
    script:
        - local-php-security-checker --path=./composer.lock
    allow_failure: true

sonarcloud-check:
    stage: quality
    image: sonarsource/sonar-scanner-cli:latest
    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .sonar/cache
    script:
        - sonar-scanner
    only:
        - merge_requests
        - main
        - master
        - develop

phpunit:
    stage: test
    image: php:8.0-fpm
    services:
        - name: postgres:13
          alias: postgres
    dependencies:
        - build-job
    variables:
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
        APP_ENV: test
    before_script:
        - apt-get update && apt-get install -y git libzip-dev unzip libpq-dev postgresql-client libicu-dev
        - docker-php-ext-install pdo pdo_pgsql zip intl
        - curl -sS https://getcomposer.org/installer | php -- --disable-tls && mv composer.phar /usr/local/bin/composer
        - grep -v '^#' .env.local.dist > .env.local
        - composer update --with-all-dependencies
        - php bin/console cache:clear
        - php bin/console doctrine:database:drop --if-exists --force --env=test
        - php bin/console doctrine:database:create --env=test
    script:
        - php bin/console doctrine:migration:migrate --env=test --no-interaction
        - php bin/console doctrine:fixtures:load --env=test --no-interaction
        - vendor/bin/phpunit --testdox
    allow_failure: false

heroku_deploy:
    stage: deploy
    script:
        - apt-get update -qy
        - apt-get install -yqq ruby ruby-dev nodejs curl --silent
        - curl https://cli-assets.heroku.com/install.sh | sh  # Installer le CLI Heroku
        - heroku --version  # Vérifier l'installation de Heroku CLI
        - heroku plugins:install heroku-repo  # Installer le plugin heroku-repo pour purger le cache
        - heroku repo:purge_cache -a $HEROKU_APP_NAME  # Purger le cache Heroku
        # Déploiement Heroku
        - gem update --system
        - gem install dpl
        - dpl --provider=heroku --app=$HEROKU_APP --api-key=$HEROKU_PRODUCTION_KEY
    only:
        - master
        - main

