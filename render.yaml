services:
  # Memcached service
  - type: pserv
    name: memcached
    runtime: docker
    repo: https://github.com/your-repo/memcached
    dockerCommand: memcached
    envVars: []
    scaling:
      minInstances: 1
      maxInstances: 1

  # Mailhog service
  - type: web
    name: mailhog
    runtime: docker
    repo: https://github.com/your-repo/mailhog
    dockerCommand: mailhog
    scaling:
      minInstances: 1
      maxInstances: 1
    ports:
      - 8025:2011

  # Redis service
  - type: redis
    name: redis
    runtime: docker
    repo: https://github.com/your-repo/redis
    scaling:
      minInstances: 1
      maxInstances: 1
    plan: starter # Adjust plan if needed

  # PostgreSQL database service
  - type: database
    name: database
    plan: basic-1gb
    diskSizeGB: 10
    envVars:
      - key: POSTGRES_PASSWORD
        value: postgres
    readReplicas: [] # No read replicas configured
    ipAllowList: # Allow all IPs
      - source: 0.0.0.0/0
        description: all-access
    volumes:
      - name: database-data
        mountPath: /var/lib/postgresql/data

  # PgAdmin service
  - type: web
    name: pgadmin
    runtime: docker
    repo: https://github.com/your-repo/pgadmin
    dockerCommand: pgadmin
    envVars: []
    scaling:
      minInstances: 1
      maxInstances: 1
    ports:
      - 80:2023

  # PHP service
  - type: web
    name: php
    runtime: docker
    repo: https://github.com/your-repo/php
    dockerCommand: php
    envVars: []
    scaling:
      minInstances: 1
      maxInstances: 1
    dependsOn:
      - database
      - redis
      - memcached
    volumes:
      - name: php-app-data
        mountPath: /app/public
      - name: php-caddy-data
        mountPath: /data
      - name: php-caddy-config
        mountPath: /config
      - name: php-ini
        mountPath: /usr/local/etc/php/php.ini
    ports:
      - 80:80
      - 443:443
      - 443:443/udp

  # Node.js service
  - type: worker
    name: node
    runtime: docker
    repo: https://github.com/your-repo/node
    dockerCommand: ["bash", "-c", "yarn && yarn dev --watch"]
    scaling:
      minInstances: 1
      maxInstances: 1
    dependsOn:
      - php
    volumes:
      - name: node-app-data
        mountPath: /home/wwwroot/sf5-p4